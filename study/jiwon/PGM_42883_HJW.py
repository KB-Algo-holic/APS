# PGM 42883 - 큰 수 만들기
# 유형: 그리디
# 링크: https://school.programmers.co.kr/learn/courses/30/lessons/42883

'''
number = 4177252841, k = 4인 케이스의 정답은 775841입니다. 즉, 앞에서부터 (4,1,2,2) 4개(k개)가 제외됩니다.
직관적으로만 보았을 때, 8은 뒤에 2자리 밖에 없으니, 첫째 자리 수는 7이 되야 할 것입니다. 그럼 (4,1)이 버려지게 되고, 그 뒤에 작은 수인 (2,2) 만 버려주면 될 것 같습니다.
해당 과정을 일반화한다면, 총 k개를 제외하기 전까지, 특정 위치의 숫자가 앞의 수보다 더 크다면, 앞에 있는 숫자는 다 제외시키면 됩니다.
구현은 스택을 통해서 할 수 있습니다. 앞에서부터 순회하며 숫자를 스택에 저장합니다. 이 때, 스택의 peek와 비교하며 스택에 있는 숫자가 더 작다면 전부 pop해주면 됩니다.

예시를 통해서 살펴보면,
stack = [], num = 4177252841, k = 4
stack = [4], num = 177252841, k = 4
stack = [41], num = 77252841, k = 4 에서, 7은 stack에 저장된 (4,1) 보다 크기 때문에, 1 -> 4 순으로 pop됩니다. 2개의 숫자를 제외했으므로, k는 2를 감소시키면 됩니다.
stack = [7], num = 7252841, k = 2
stack = [77], num = 252841, k = 2
stack = [772], num = 52841, k = 2 에서, 5는 stack에 저장된 (2) 보다 크기 때문에, 2는 pop됩니다. 7보다는 작기 때문에 더 이상의 pop은 일어나지 않습니다. 1개의 숫자를 제외했으므로, k가 1이 감소합니다.
stack = [775], num = 2841, k = 1
stack = [7752], num = 841, k = 1 에서, 8은 stack에 저장된 (2) 보다 크기 때문에, 2는 pop됩니다. 2를 제외하는 순간, k가 1이 감소하며, k = 0이 되므로, 저장되어 있던 (7,7,5)과는 더 이상 비교할 필요가 없습니다.
stack = [7758], num = 41, k = 0
stack = [77584], num = 1, k = 0
stack = [775841], k = 0
result = 775841

사이드케이스로, 내림차순으로 정렬된 숫자를 처리하는 로직이 추가로 필요합니다.
예를 들어,
number = 987654321, k=3이라고 가정하면, 정답은 987654이 됩니다.
하지만 스택을 통해서 제외하는 과정에서, pop되는 경우가 발생하지 않습니다. 순회하며 만난 숫자는 반드시 스택 안의 숫자보다 작다는 것이 보장되기 때문입니다.
따라서 전체의 과정이 끝난 뒤, 아래와 같은 결과로 남게 됩니다.
stack = [987654321], k = 3
따라서, k = 0이 될 때까지, stack에서 pop해주기만 하면 올바른 결과를 낼 수 있습니다.

구현된 코드는 아래와 같습니다.

'''

def solution(number, k):
    number = list(number)
    stack = []
    for num in number:
        if not stack:
            stack.append(num)
            continue
        
        while stack and k and stack[-1] < num:
            stack.pop()
            k -= 1
        
        stack.append(num)
    
    while k:
        stack.pop()
        k -= 1
        
    return ''.join(stack)